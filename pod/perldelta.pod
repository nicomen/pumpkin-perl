=encoding utf8

=head1 NAME

perldelta - what is new for perl v5.35.4

=head1 DESCRIPTION

This document describes differences between the 5.35.3 release and the 5.35.4
release.

If you are upgrading from an earlier release such as 5.35.2, first read
L<perl5353delta>, which describes differences between 5.35.2 and 5.35.3.

=head1 Core Enhancements

=head2 C<defer> blocks

This release adds support for C<defer> blocks, which are blocks of code
prefixed by the C<defer> modifier. They provide a section of code which runs
at a later time, during scope exit.

For more information, see L<perlsyn/"defer blocks">.

=head2 Unicode 14.0 is supported

See L<https://www.unicode.org/versions/Unicode14.0.0/> for details.

=head2 SIGFPE no longer deferred

Floating-point exceptions are now delivered immediately, in the same way
as other "fault"-like signals such as SIGSEGV. This means one has at
least a chance to catch such a signal with a C<$SIG{FPE}> handler, e.g.
so that C<die> can report the line in perl that triggered it.

=head2 Stable boolean tracking

The "true" and "false" boolean values, often accessed by constructions like
C<!!0> and C<!!1>, as well as being returned from many core functions and
operators, now remember their boolean nature even through assignment into
variables. The new function C<isbool()> in L<Scalar::Util> can check whether
a value has boolean nature.

This is likely to be useful when interoperating with other languages or
data-type serialisation, among other places.

=head1 Incompatible Changes

There are no changes intentionally incompatible with 5.35.4.
If any exist, they are bugs, and we request that you submit a
report.  See L</Reporting Bugs> below.

=head1 Performance Enhancements

=over 4

=item *

We now probe for compiler support for C11 thread local storage, and where
available use this for "implicit context" for XS extensions making API calls for
a threaded Perl build.  This requires fewer function calls at the C level than
POSIX thread specific storage. We continue to use the the pthreads approach if
the C11 approach is not available.

F<Configure> run with the defaults will build an unthreaded Perl (which is
slightly faster), but most operating systems ship a threaded Perl.

=back

=head1 Modules and Pragmata

XXX All changes to installed files in F<cpan/>, F<dist/>, F<ext/> and F<lib/>
go here.  If Module::CoreList is updated, generate an initial draft of the
following sections using F<Porting/corelist-perldelta.pl>.  A paragraph summary
for important changes should then be added by hand.  In an ideal world,
dual-life modules would have a F<Changes> file that could be cribbed.

The list of new and updated modules is modified automatically as part of
preparing a Perl release, so the only reason to manually add entries here is if
you're summarising the important changes in the module update. (Also, if the
manually-added details don't match the automatically-generated ones, the
release manager will have to investigate the situation carefully.)

[ Within each section, list entries as an =item entry ]

=head2 New Modules and Pragmata

=over 4

=item *

XXX Remove this section if not applicable.

=back

=head2 Updated Modules and Pragmata

=over 4

=item *

L<XXX> has been upgraded from version A.xx to B.yy.

If there was something important to note about this change, include that here.

=item *

L<Text::Tabs> has been upgraded from version 2021.0717 to 2021.0814.

=item *

L<Text::Wrap> has been upgraded from version 2021.0717 to 2021.0814.

=item *

L<Unicode::Collate> has been upgraded from version 1.30 to 1.31.  Experimental
support for EBCDIC has been added.

=back

=head2 Removed Modules and Pragmata

=over 4

=item *

XXX

=back

=head1 Documentation

=head2 Changes to Existing Documentation

We have attempted to update the documentation to reflect the changes
listed in this document.  If you find any we have missed, open an issue
at L<https://github.com/Perl/perl5/issues>.

Additionally, the following selected changes have been made:

=head3 L<perlre>

=over 4

=item *

Updated to discourage the use of the /d regexp modifier.

=back

=head1 Diagnostics

The following additions or changes have been made to diagnostic output,
including warnings and fatal error messages.  For the complete list of
diagnostic messages, see L<perldiag>.

=head2 New Diagnostics

=head3 New Errors

=over 4

=item *

L<Can't "%s" out of a defer block|perldiag/"Can't "%s" out of a defer block">

(F) An attempt was made to jump out of the scope of a defer block by using
a control-flow statement such as C<return>, C<goto> or a loop control. This is
not permitted.

=back

=head3 New Warnings

=over 4

=item *

L<defer is experimental|perldiag/"defer is experimental">

(S experimental::defer) The C<defer> block modifier is experimental. If you
want to use the feature, disable the warning with
C<no warnings 'experimental::defer'>, but know that in doing so you are taking
the risk that your code may break in a future Perl version.

=back

=head2 Changes to Existing Diagnostics

=over 4

=item "unexpected constant lvalue entersub entry via type/targ %d:%d" now has a panic prefix

This makes it consistent with other checks of internal consistency when
compiling a subroutine.

=item Removed a number of diagnostics

Commit 6a3871b339 removes many diagnostics that have been removed from the
perl core across many years.

=back

=head2 Platform-Specific Notes

=over 4

=item C<keys %ENV> on VMS returns consistent results

On VMS entries in the C<%ENV> hash are loaded from the OS environment on
first access, hence the first iteration of C<%ENV> requires the entire
environment to be scanned to find all possible keys. This initialisation had
always been done correctly for full iteration, but previously was not
happening for C<%ENV> in scalar context, meaning that C<scalar %ENV> would
return 0 if called before any other C<%ENV> access, or would only return the
count of keys accessed if there had been no iteration.

These bugs are now fixed - C<%ENV> and C<keys %ENV> in scalar context now
return the correct result - the count of all keys in the environment.

=back

=head1 Internal Changes

=over 4

=item *

C<Perl_ptr_table_clear> has been deleted. This has been marked as deprecated
since v5.14.0 (released in 2011), and is not used by any code on CPAN.

=item *

Added new boolean macros and functions. See L</Stable boolean tracking> for
related information and L<perlapi> for documentation.

=over 4

=item *

sv_setbool

=item *

sv_setbool_mg

=item *

SvIsBOOL

=back

=item *

Added 4 missing functions for dealing with RVs:

=over 4

=item *

sv_setrv_noinc

=item *

sv_setrv_noinc_mg

=item *

sv_setrv_inc

=item *

sv_setrv_inc_mg

=back

=item *

C<xs_handshake()>'s two failure modes now provide distinct messages.

=back

=head1 Acknowledgements

Perl 5.35.4 represents approximately 4 weeks of development since Perl
5.35.3 and contains approximately 64,000 lines of changes across 540 files
from 19 authors.

Excluding auto-generated files, documentation and release tools, there were
approximately 49,000 lines of changes to 310 .pm, .t, .c and .h files.

Perl continues to flourish into its fourth decade thanks to a vibrant
community of users and developers. The following people are known to have
contributed the improvements that became Perl 5.35.4:

Aristotle Pagaltzis, Chris 'BinGOs' Williams, Dagfinn Ilmari Manns√•ker, Dan
Book, David Mitchell, Felipe Gasper, Hugo van der Sanden, James E Keenan,
Karen Etheridge, Karl Williamson, Nicholas Clark, Paul Evans, Richard Leach,
TAKAI Kousuke, Todd Rinaldo, Tomasz Konojacki, Tomoyuki Sadahiro, Tony Cook,
Unicode Consortium.

The list above is almost certainly incomplete as it is automatically
generated from version control history. In particular, it does not include
the names of the (very much appreciated) contributors who reported issues to
the Perl bug tracker.

Many of the changes included in this version originated in the CPAN modules
included in Perl's core. We're grateful to the entire CPAN community for
helping Perl to flourish.

For a more complete list of all of Perl's historical contributors, please
see the F<AUTHORS> file in the Perl source distribution.

=head1 Reporting Bugs

If you find what you think is a bug, you might check the perl bug database
at L<https://github.com/Perl/perl5/issues>.  There may also be information at
L<http://www.perl.org/>, the Perl Home Page.

If you believe you have an unreported bug, please open an issue at
L<https://github.com/Perl/perl5/issues>.  Be sure to trim your bug down to a
tiny but sufficient test case.

If the bug you are reporting has security implications which make it
inappropriate to send to a public issue tracker, then see
L<perlsec/SECURITY VULNERABILITY CONTACT INFORMATION>
for details of how to report the issue.

=head1 Give Thanks

If you wish to thank the Perl 5 Porters for the work we had done in Perl 5,
you can do so by running the C<perlthanks> program:

    perlthanks

This will send an email to the Perl 5 Porters list with your show of thanks.

=head1 SEE ALSO

The F<Changes> file for an explanation of how to view exhaustive details on
what changed.

The F<INSTALL> file for how to build Perl.

The F<README> file for general stuff.

The F<Artistic> and F<Copying> files for copyright information.

=cut
